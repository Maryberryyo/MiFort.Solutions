
И это, на самом деле, для нас еще одна возможность нормально собрать требования.
Здесь у нас есть несколько фаз, которые, вообще говоря, двигаются последовательно. Они могут быть параллельно, но они двигаются, они делаются последовательно.
Первая часть, первый блок — это UX и UI-дизайн. Как правило, эти две штуки объединят.
Хотя, конечно же, по факту,
эта работа вообще абсолютно разная.
Совершенно разная,
которая общего практически ничего не имеет. За исключением того, что и одно, и другое — это пропользовательское взаимодействие.
То есть UX — это работа аналитическая.
То есть это работа проектирования, это работа эргономики. Мы сейчас посмотрим, вот здесь прописано какие-то вещи, типа интерактив, анализ телевизиори, сценарий, структура, прототипы. На самом деле,
все эти блоки мы сейчас посмотрим подробнее.
С другой стороны, UI-дизайн — это вообще небольшая часть пользовательского взаимодействия,
где продумываются какие-то визуальные решения.
В UI-дизайне у нас уделяется довольно много внимания цвету.
У нас уделяется много внимания шрифтам.
У нас уделяется много внимания лояутам. вот,
визуальному и графическому дизайну. Я сейчас расскажу подробнее, что к чему относится, потому что иногда эти работы выполняют разные люди.
Но это все про то,
условно, как разукрасить вашу картинку. То есть, если представлять дизайн,
это...
Если бы представлять дизайн,
ну UI, UX дизайн, как рисование какой-то картины, то UX дизайн — это рисование самой картины, да, а UI дизайн — это разукрашивание квартиры, картины и расставление нюансов.
То есть вот там какие-то там дополнительные мелкие элементы, которые добавляют определенного, расставляют определенные акценты и так далее.
Эти люди могут быть разными, то есть UX и UI-дизайн могут делаться разные люди, обычно UI-дизайн — это прям художники-художники, то есть я художники, я так вижу, это всё про эту категорию людей.
UX-дизайн могут делать бизнес-аналитики,
могут делать project-менеджеры.
С UX-дизайном все намного проще, потому что здесь нет вопроса вкусов.
Здесь исключительно вопрос практичности.
А это, вообще говоря, достаточно строгая дисциплина,
ну и достаточно четкие правила того, как мы вообще добиваемся тех или иных результатов. На этот счет есть прям очень хорошие книжки и очень хорошие курсы. То есть если UI-дизайнерам желательно иметь какое-то видение, То есть вы можете изучить там теорию цветов,
но при этом все равно будете так себе заниматься формированием этих цветов, то вот UX — это прямо дисциплина, которую можно изучить и делать.
Вот.
Начинается все условно с UX-дизайна. UX-дизайн у нас делится плюс-минус на шесть фаз.
Я уже сказал, что UX-дизайн у нас могут делать разные люди. Частенько в маленьких проектах, в маленьких компаниях эту работу на себя берут бизнес-аналитики,
project-manager.
Иногда фронтенд-разработчики, но это прямо редкость-редкость.
Иногда это выделенные люди,
UX-дизайнеры. То есть он не делает UI, он делает только UX.
Итого, у нас есть этапы работы.
То есть первое — это анализ целевой аудитории.
Это одна из важных частей любого UX-дизайнера.
На самом деле, при разработке любого приложения нужно понимать, для кого вы его делаете. Клиенты частенько вообще этого не понимают. У него есть идея,
и он не пытается понять, кто же будет целевая аудитория.
А исходя из того, кто такая целевая аудитория,
я сейчас приведу пример,
от этого зависит весь пользовательский опыт. Например,
мы делаем приложение для ресторанов, где у нас официанты делают заказ,
или, допустим, у нас там есть,
да, давайте даже так, то есть у нас пришел клиент и говорит, типа, я хочу приложение для своего ресторана, где можно будет делать заказы. Можно делать заказы онлайн, можно делать заказы за столиком, то есть на столике будет какой-то QR-код,
вы его сканируете, делаете заказ.
И при этом, типа,
приходите,
ну, то есть заказ прилетает сразу же на кухню, то есть там его могут увидеть официанты или какой-то обслуживающий персонал, прилетает на кухню, и на кухне его уже начинают готовить.
Вот. Это идея, которая есть у клиента. А потом мы переходим к реальности и узнаем, что это, в общем-то,
ресторан а-ля upscale ресторан, то есть высокая цена, и первая ключевая особенность ресторана — это обслуживание.
То есть это вы, когда забежали на бизнес-ланч, вас устроят, в принципе, зайти, отсканировать QR-код, чтобы не ждать официанта, который быстро прибежит. А когда вы пришли в дорогой ресторан,
вы хотите, чтобы к вам подошел ресторан, подошел как бы официант и предложил что-то или еще,
ну, или узнал что-то, или еще что-то, то есть вы платите за обслуживание.
Приложение вот в таком виде, оно просто не зависит, оно будет неинтересным.
Другой момент — это кухня, да, то есть заказ прилетел на кухню,
возможно, прилетел с какими-то пометками или еще что-то,
но на кухне вообще неудобно пользоваться экранами. То есть там или экраны должны быть специальные, которые, типа,
ну,
влага, грязь и все остальное отталкивающие или непроницаемые.
Или другой тип пользовательских интерфейсов, например, голосовые пользовательские интерфейсы, которыми тоже можно работать.
Поэтому вопрос типа пользовательской аудитории как бы вашего приложения, он ключевой, и клиенты вообще не всегда об этом задумываются.
Просто потому что у него есть классная идея, он хочет ее сделать.
Следующий пункт — это анализ конкурентов.
UX-дизайнеры тоже его делают.
Клиенты частенько его просто не делают.
Не думаю, что здесь нужно рассказывать что-то подробно.
UX-дизайнеры этим занимаются.
Следующий — это структура.
И тут прям может быть много важных нюансов, которые нужно предусматривать с точки зрения структуры и схемы самого решения, которое предлагается, и дизайнеры, в общем-то, этим и занимаются. Хорошо ли, если это к вам совсем пришло? Это может выглядеть по-разному, это просто то, чем мы занимаемся.
Это может выглядеть по-разному, в инструментах автоматических это выглядит примерно вот так. То есть у вас или есть экраны, то есть если у вас до сих пор нет экрана, то это могут быть просто квадратики, которые линиями соединяются,
прописывая структуру переходов. Одно дело — это структура самого сайта,
вот структура самого сайта,
она такая иерархическая, как правило. Другое дело — это навигация. Вот пример — это, на самом деле, user flow,
то есть как пользователь будет переходить, делая какую-то фичу.
Ну, то есть здесь мы проговариваем именно навигацию.
Следующий этап — это прототипирование. Это классный вариант, когда набрасывается визуал, то есть как вообще будет выглядеть приложение,
но это обычно вот такими вот квадратиками набрасывается, никто не рисует, это готовые блоги, которые вставляются, тут у меня будет экранчик, на котором у меня логин, если логин состоялся у меня сайна,
потом я должен перейти на следующий экран, он будет выглядеть примерно так,
то есть здесь никто не уделяет внимание деталям.
Здесь ключевое — это именно,
что мы показываем. То есть, как происходят переходы, что видят пользователи и так далее.
То есть,
эти прототипы, они, как правило, кликабельные. Я вам нашел кликабельный прототип? Не нашел.
Вот. Эти прототипы, как правило, кликабельные.
Вот. Вы прямо вам показываете вот этот кнопочек, вы нажимаете на этот прямоугольник, у вас открывается следующий экран прототипа.
Поэтому их стараются сделать максимально рисованными, то есть вы иногда видите, что они такие, типа, их делают на компьютере,
в этих приложеньках их рисуют так, как будто они нарисованы от руки.
То есть там неровные линии, то есть они не дорисованы до конца и все такое.
Зачем это делается? Для того, чтобы клиент понимал, что это вообще еще и близко не приложение. То есть это все еще своеобразная фаза сбора требований,
своеобразная фаза формирования пользовательского опыта, взаимодействия.
И на самом деле это прям один из лучших инструментов для сбора требований, потому что клиент визуально может посмотреть, как у него работает это приложение. Делается вообще очень просто.
Ещё раз повторюсь, вот этими всеми инструментами может пользоваться прям PM. Потому что здесь прям можно набрасывать пользовательские экраны,
уже прям можно надиктовывать АИшки, чтобы оно вам нарисовало эти экраны. Потому что, ну, они тупые, они типовые.
Но они позволяют клиенту взглянуть вот на то, как выглядит то, что он говорит.
И здесь уже есть возможность попробовать прописать,
exceptional case, то есть заставить клиента задуматься о том,
что вообще получается, когда пользователь не видит то, что нужно. Еще раз повторюсь, то есть мы на этом застряем внимание, потому что эти этапы частенько фигурируют на pre-sale фазе,
то есть когда мы пытаемся показать клиенту, типа, ну или сложность как бы самого приложения,
вот, или пытаемся обратить внимание на какие-то отдельные аспекты. И это как бы, да, это может делать практически любой человек.
Следующие две фазы,
это тест и развитие доработка. Безусловно, мы садимся, пробуем пройтись по этим сценариям, по этому прототипу с условно неподготовленным пользователем. И впоследствии идем еще раз по этому циклу, садимся, дорабатываем эти прототипы.
Как видите, все материалы, с которыми работают UX-дизайнеры, они довольно формальны.
Инструменты, с которыми они это делают, сейчас один из самых популярных — это, конечно же, Figma.
Про Figma все слышали, да?
Давайте пальцы вверх. Слышали про фигню? Всё супер. Я больше про тильды, наверное.
Особенно в инстаграме такие горе-блогеры, или как их там называют, которые пишут шапки профила.
XUI-дизайнер. Вот они все на тильды работают.
Я брал этот материал как бы с Яндекс.Практики.
А тильда — это чисто в русском мире существует фигня. То есть это быстрое прототипирование, это штука, которая существует только для вот такой констанции.
Вот. То есть по большому счету, как бы,
частые штуки, которыми реально пользуются, это, конечно же, фигма.
Всякие аналоги фигмы. То есть здесь нет ничего про прототипирование. Прототипирование — это все-таки больше про бизнес-анализы.
Вот. Но там можно будет посмотреть. То есть с точки зрения работы визуальной части... А, вот скетч еще про прототипирование. Вот.
Визуальная часть — это Photoshop, то есть линейка продуктов Adobe.
То есть у них там прям всё, оно всё между собой хорошо дружит. А вот тестирование продукта — это уже нижние продукты, да.
Нижние продукты, то есть User Testing, Crazy Egg и так далее.
Это уже для тестирования ваших интерфейсов.
Так, с UX-дизайном всё понятно.
Хорошо.
Тогда переходим к более понятной теме. это UI-дизайн.
Здесь будет не так много вещей, которые мы расскажем, но я постараюсь все показать, чтобы вы плюс-минус поняли, в чем между ними разница. К тому же здесь есть вещи, которые делают разные люди.
Под UI-дизайном обычно подразумеваются вот эти пять ключевых понятий,
которые вам не обязательно, опять же, знать глубоко. То есть цветовые схемы, цветовые решения — это не то, чтобы прям какая-то сложная теория, есть как бы творческая часть,
но есть прям шаблоны, которые нам хорошо известны.
То есть каким образом формировать вообще цветовые решения, цветовые схемы,
на этот счет есть прям очень много классных,
уже готовых решений, уже готовых схем,
к которым люди привыкли. То есть здесь на самом деле есть несколько моментов, но это очень часто упирается в социологические и психологические исследования, то есть каким образом воспринимаются отдельные цветовые решения в обществе.
Поэтому это такая часть шарлатанства,
это вот как раз та тема, где можно сказать, я художник, я так вижу.
При этом реально уже есть куча классных разработанных схем, которые Бери пользует.
И в вебе их используют очень легко, есть сайты, можете загуглить, просто Color Scheme,
где показываются цветовые схемы, которые можно прям на лету сгенерировать автоматически, то есть не надо быть прям дизайнером, для того чтобы с этим хорошо разбираться. К тому же, опять же, вот есть эта дурацкая тема психология цвета, то есть в принципе теория цвета и есть психология цвета, каким образом мы воспринимаем, каким образом разная аудитория воспринимает разные цвета.
Вот у меня есть нижняя картиночка, которая говорит типа,
ага,
а собственно разные бренды, они активно пользуют разные цвета в зависимости от того, каким образом они хотят выстраивать взаимоотношения с клиентом. То есть мы говорим, что там оранжевый, желтый цвет — это цвета инновации, то есть синий цвет — это цвета надежности, зеленый цвет — это всякие грин,
там, френдли, эти самые продукты, черный цвет — это у нас там...
Чёрный цвет по-разному воспринимается в мужской и женской аудитории, то есть и по возрасту он тоже играет разную роль, поэтому очень важно выбрать, какая у вас целевая аудитория во время сбора требована для того, чтобы предложить правильное цветовое решение.
Вот, тем не менее, да, то есть типа эти исследования пляшут от времени ко времени, и за ними нужно следить, это то, за что дизайнеры просят там свои дополнительные денежки,
что они, знают какую-то таинственную магию цветов.
Довольно простая и, вообще говоря, механическая тема — это лояуты, то есть каким образом правильно располагать элементы на сайте для того, чтобы они хорошо воспринимались.
Здесь прямо есть довольно четкая теория,
которой нужно придерживаться. То есть эта теория разработана не веб-дизайнерами, эта теория разработана теми, кто верстал книги и журналы. Она до сих пор активно используется, здесь вообще нет никаких сюрпризов.
Практически все ваше представление делится на условно какие-то визуальные блоки, мы прекрасно знаем, как люди читают текст, как бегают их глаза, мы прекрасно знаем, как нужно располагать, чтобы все читалось, хорошо виделось, поэтому здесь вообще никаких сюрпризов.
Это то, чему довольно просто учиться,
довольно легко делать. в графический дизайн у нас входит вообще еще работа со шрифтами.
Опять же, тут есть несколько моментов, которые важно принимать во внимание.
Это и психология небольшого восприятия разного рода графических элементов, да,
и само те средства, на которые выводятся вообще эти самые ваши графические средства. То есть шрифты, которые используются на приставках и в играх, Шрифты, которые используются там, на каком-нибудь магазине,
журналах, газетах и так далее, онлайн, да, в книгах и на сайтах, это разные типы шрифтов.
Это просто нужно знать и правильно использовать. Здесь нет никакой магии.
Опять же, это все довольно четко прописано,
и знаем мы это прекрасно из тех, как бы,
наработок, которые пришли к нам из журналов и газет, из внешней рекламы. То есть это тоже изучается там, не знаю,
пара лекций, как бы это всё видится и всё знается. Этим занимаются эти самые.
Два больших блока — это графический и визуальный дизайн.
Визуальный дизайн — это подача, ну, правильная композиция. То есть если лайаут — это правильное расположение просто чтобы вам было не неприятно смотреть на сайт, чтобы вы чувствовали порядок,
то визуальный дизайн — это то, каким образом воспринимать. Здесь действительно нужно следовать определенным правилам, следовать довольно сложно, правила нечеткие.
Есть какие-то базовые принципы, которые дизайнеры учатся, и дальше это все дело практики.
Здесь у нас тоже, может быть, это элемент, я дизайнер, я так вижу,
но здесь надо практикой, нужно надевать руку для того, чтобы правильно научиться это все делать.
Расставлять акценты,
опять же, отталкиваясь от того, кто у нас запользуется, каким образом они пользуются нашими приложениями и так далее.
Этим занимаются UI-дизайнеры, этим уже, как правило, не может заниматься PM или бизнес-аналитик.
UX-дизайнеры могут вмешиваться, говоря о том, что это как-то не так воспринимается, но по большому счету финальное слово за пользователями, финальное слово за дизайнерами.
Немножко другая тема — это графический дизайн.
Если вы посмотрите, какие здесь элементы отнесены к графическому дизайну, вы видите, что это фотографии, векторная графика, рисование, инструменты и так далее.
Графический дизайн — это рисование картиночек.
То есть это создание визуалов и планирование того, как воспринимается.
Наш графический дизайн, у нас там была картиночка Джокера.
Это наш графический дизайн. То есть вот нарисовать его именно таким,
да, то есть там с вот этими вот ушками, с такими же вот уголками резкими, с такими же уголками резкими, да, то есть с такими же острыми элементами, с такой вот угловатой формой — это элементы графического дизайна. из дизайна.
И здесь как будто бы тоже довольно много такой типа, я художник, я так вижу,
работы, которая, ну, она на опыт,
на способности, на чувство аудитории отталкивается. И эта работа требует прям... если все предыдущие элементы,
условно, вот это можно взять, просто с сайта забрать, цветовые схемы взять с сайта, то есть лояуты, это легко, Топография — это типовые решения, да?
К визуальному дизайну ты тоже привыкаешь.
Здесь прям работа с графикой, то есть это нужно рисовать.
То есть здесь прям художники рисуют.
То есть да, можно насобирать сейчас,
сейчас вообще можно попросить АИшку нарисовать, да, и она плюс-минус какое-то говно вам сгенерирует,
вот. А это говно, конечно же, не будет,
ну, то есть там, вряд ли оно будет иметь правильную художественную ценность, да, то есть вряд ли оно будет правильным взаимодействовать с вашей аудиторией. Да вам, часто, чаще всего, и не надо правильное взаимодействие, давайте будем честными, вы делаете просто для того, чтобы было очень часто.
Реально глубоко продумывают пользовательское взаимодействие,
ну прям крупные сайты, крупные приложения, крупные бренды и так далее.
И вот им,
ну для них эту работу уже делают прям графические дизайнеры.
Для всех остальных мы берем просто, открываем стольки картинок и собираем эту информацию оттуда.
Это что касается нашего фазы UI-дизайна.
Идем дальше.
Это технический дизайн.
Технический дизайн, то есть говоря о процессе самой разработки,
как правило,
в небольших проектах и не очень-то сговорчивых клиентах
Фаза бизнес-анализа превращается в такое легкое шерлотанство, то есть когда мы просто составляем эти самые юзер-стори,
проговариваем какие-то верхнеуровневые вещи, и там дальше клиент убежал, потому что у него куча дел.
И погнали работать.
И большая часть сбора требований попадает именно на UX-дизайн.
На фазе UX-дизайна пользу клиентам, как правило, интересно с вами работать, потому что мы рисуем какие-то экранчики, мы рисуем какие-то переходы, вот я уже вижу, как у меня приложение работает. Это все вовлекает клиента намного больше.
И поэтому существенная доля сбора требований для, опять же, для небольших приложений, она,
как правило, ложится на плечи UX-дизайна.
Поэтому в UX-дизайне есть отдельная фаза, которую выделяют как ресерч.
После того, как UX-дизайн закончен,
по крайней мере, готовы структуры, готовы экраны,
то есть на самом деле у нас появились какие-то требования, мы можем переходить к техническому дизайну.
То есть да, UX-дизайнеры могут продолжить работать с тестированием этих идей и с дальнейшими доработками,
но когда есть структура, есть какие-то требования, мы уже можем передавать в технический отдел это решение.
И уже только после этого у нас могут начинать работать графические дизайнеры, то есть UI-дизайнеры.
Технический дизайн и UI-дизайн, они могут делаться уже параллельно. Но до того, как готовы переходы из структуры общеприложения, то есть никто начать работу не может, потому что это просто бред.
Технический дизайн, напоминаю, что мы все это обсуждаем, потому что с этим приходится сталкиваться в рамках первичных коммуникаций с клиентами, не настолько обычно глубоко, но, как правило, при дальнейшей проработке проекта приходится это все понимать.
И с вот этими артефактами тоже приходится сталкиваться.
Техническая документация, как правило, представляет из себя,
в 90-80% случаев мы ограничиваемся исключительно high-level overview или solution strategy. То есть это документик, который просто сверху показывает, каким образом это приложение будет работать.
Клиенту чаще всего этого достаточно. Он успокаивается,
ну то есть он же не технический специалист, поэтому ему вообще плевать, как он будет работать, по большому счету.
Но ему не наплевать, кто вы такие и как с вами вообще можно взаимодействовать. Поэтому одной картинки ему достаточно для того, чтобы показать, что вы офигенные специалисты,
вы прекрасно понимаете, как это должно работать и что там будет делаться.
То есть если я покажу эту картинку какому-нибудь заказчику и говорю, так, смотрите, у вас будет вот так, вот так,
то он такой, типа, а, ну, нормально.
При этом он вот нихрена не понимает, что такое API Gateway.
Что такое Elasticsearch тоже не понимает.
Иногда клиенты приходят и говорят, типа, я хочу, чтобы у меня платежки принимали с помощью страйка. Вы в эту картинку снимаете страйк и говорите, вон там у вас будут принимать платежки с помощью страйка.
Каким образом в действительности это будет интегрировано, на самом деле сложно сказать.
Эти диаграммки,
ну, по большому счету, может рисовать кто угодно, для этого не надо быть техническим экспертом, да. Но если вы чувствуете, видите, что с вами разговаривает плюс-минус технически грамотный человек, то даже нарисовав эту диаграфку самостоятельно,
желательно передать ее какому-то техническому специалисту, ну, чтобы он проверил ее на адекватность.
Вот.
Потому что по большому счету клиент не в состоянии проверить эту картинку на адекватность сам. Он смотрит, насколько она аккуратно сделана, насколько она соответствует его каким-то внутренним представлениям о том, как должен выглядеть дизайн.
Помимо того, что мы делаем high-level overview,
ну и это довольно общая штука,
есть клиенты, для которых очень важен data flow или data architecture.
Сейчас много приложений, для которых критическим товаром являются данные. Именно поэтому для них очень важно, чтобы была нарисована какая-то архитектура тех потопков обработки данных, хранения данных, и объяснены механизмы защиты этих данных и так далее. В этих случаях рисуется Data Architecture,
или рисуется Data Flows. Здесь довольно схематично изображено, что это такое. Здесь включаются источники этих данных, каналы передачи этих данных,
Те уровни сохранения данных, которые у нас есть, это могут быть революционные, не революционные базы данных, это могут быть просто файлики какие-то или еще что-то.
Мы это будем подробнее обсуждать, когда будем разговаривать про технологию.
Каким образом эти данные трансформируются, потому что в целом, видимо, они никому особо не интересны, и попадают в какой-то другой слой,
где они смоделированы нужным клиенту образом. После этого возможен какой-то вторичный, троичный анализ и формирование своих данных в какие-то отчеты или аналитику.
То есть это интеграция с BI,
аналитическими системами и так далее.
Вот.
Это требуется на порядок реже, но в последнее время требуется все чаще.
Технический клиент обязательно попросит... А, нету здесь... А, нет, есть тут какие-то картиночки. Технические клиенты обязательно попросят архитектуру времени исполнения, то есть это runtime architecture, где будет показано, как взаимодействуют разные типы системы, подсистемы,
для того, чтобы там его требования, они плюс-минус уложились.
Сюда могут попадать еще BPMN и всякие другие графические аннотации, описания бизнес-процессов, которые мог нарисовать еще ваш бизнес-аналитик, если он у вас работал.
Технические клиенты обязательно попросят диплом от архитектуры, диплом от архитектуры еще и нужна для того, чтобы посчитать стоимость поддержки приложения. То есть приложение, когда разработано,
оно же где-то работает. Работает оно не в вакууме, работает оно на каких-то серверах.
Нужно знать, сколько это будет стоить.
Вот для этого нужна диплом от архитектуры, потому что она покажет, какие инструменты вам нужны для того, чтобы запустить это приложение, для того, чтобы пользователи могли пользоваться, какие у вас сорт-патчи системы есть.
Вот.
Здесь,
ну, на самом деле, достаточно формальная аннотация e-mail дипломента диаграммы.
Она нарисована, опять же, cartoon style, то есть типа в стиле мультиков, да, то есть где у вас неровная линия и все остальное,
опять же, просто для того, чтобы упростить восприятие для клиентов. На самом деле все элементы здесь четко прописаны, и архитекторы, технические специалисты умеют правильно читать эти аннотации. Все стрелочки здесь имеют смысл, пунктирные, сплошные имеют правильный смысл,
все иконочки имеют правильный смысл, так же, как и сами исхожения.
Поэтому архитектура, диплом от архитектуры, она в любом случае рисуется. То есть на проекте она в любом случае будет нарисована для того, чтобы разработчикам объяснить, как это правильно, загрузить на сервера, как оно должно правильно работать.
И с ее помощью можно посчитать стоимость подальнейшего поддержки. То, в чём вообще необязательно разбираться, но если вдруг где-то мелькнуть, это архитектурная фреймворка. То есть все вот эти вот элементы, они, как правило, собираются в общий шаблон того, как описываются проекты.
Есть масса шаблонов, как это правильно делается.
Мы, как правило, используем шаблон ARC 42,
иногда используем элементы из тогов. То есть, как бы,
частенько, ну, не частенько, но иногда встречаются первые две модели, но они чуть более ранние.
По индустрии, то есть, все говорят о том, что в 80-процентных случаях используются именно тогов.
Это open-source framework для описания архитектуры, но он очень формальный, поэтому стартапы к нему никогда не перебегают. То есть, как бы, ARC-42 выглядит куда более легковесно.
Так,
это что касается технического решения.
По итогу, дизайн фазы, то есть у вас есть четкое понимание того, как будет работать приложение, как портиться, будет ли взаимодействие с этим решением, хорошо, если у вас есть UI-дизайн.
UI-дизайн очень часто просто опускается.
То есть если у клиента MVP, ему надо понимать, как оно выглядит.
То есть, ну, это вы можете не отдавать себе в этом отчет, но UI-дизайн может пропускаться, потому что это долго-долго делать.
UX вполне достаточно, после UX мы можем переходить уже к разработке.
Технические решения тоже частенько опускаются, потому что простые приложения мы прекрасно знаем, как делать.
Если кто-то приходит и говорит, типа, мне нужно приложение для, ну, типа, booking.com, То есть для бронирования этих самых,
честно говоря, у нас есть целые книжки, которые написаны о том, как сделать такое приложение.
То есть нам не надо еще раз писать техническое решение для такого приложения, мы прекрасно знаем, как это делать.
Если нам нужно показать клиенту, как оно будет работать, мы просто сделаем скриншот из этой книжки.
Вот. И, ну, честно говоря, таких решений готовых их прям дофигища.
То есть их прям миллион. Вот.
И поэтому как бы фаза технического дизайна, она иногда может пропускаться, потому что, ну, он тривиальный, то есть мы все прекрасно знаем правильные технические решения для такого типа приложения.
Ну,
ключевым здесь, наверное, будет являться только UX-дизайн, и в UX-дизайне, как бы, самые приятные штуки — это прототипирование и составление там структуры и всего остального вашего приложения, Потому что именно на этих фазах клиент вовлекается больше всего и готов делиться каким-то своим пониманием того, как продукт должен работать.
Так, на этом все.
По этой части с завтрашнего дня мы начинаем с коммуникации, начинаем с интернальной коммуникации, то есть правила внутренней коммуникации сотрудников, какие они бывают,
какие вообще приняты, какие есть нормы, которые общие приняты вообще в индустрии. Вот. Возможно, заденем какой-то вопрос по поводу внутреннего томового смайфера и всего остального.
И уже со среды бежим по клиентской коммуникации, по топикам, условно,
взаимодействия с клиентами.
Вот.
По инструментам у вас сегодня, Дамашка, это по работе с PDF-ками.
Там, по-моему, что-то совсем несложное.
По этому материалу мы сейчас кинем.
Завтра мы разбираем, смотрите, по таймингу, то есть мы до конца недели подробно разбираем Software Development Lifecycle, то есть на самом деле у нас осталось 4 фазы, и мы их будем пробегать чуть-чуть быстрее.
То есть мы разберем разработку, это прям на один день, это на завтра,
тестирование разбирается довольно быстро.
Возможно, мы завтра разберем разработку, тестирование, а потом разберем внедрение и поддержку, то есть может быть тестирование и поддержку сделаем одним большим блоком и разберемся за один день.
То есть, условно, нам где-то к четвергу,
мы хотим закончить с Software Development Lifecycle и перейти к теме технологии.
То есть начать обсуждать такие конкретные технологии, которые сейчас используются. Сейчас я это все старательно обхожу, нигде не упоминаю, нигде никакие Java, C-Sharp и все остальное, для того, чтобы создать общую канву, какое-то общее представление о том, что, где и как происходит.
Только после этого мы переходим непосредственно к разработке, тестированию и технологиям, которые там используются.
Как-то так.
Вопросы?
По поводу записи экрана делить на UX,
UI, или вот сначала UserStory, потом UX? Сначала вот тема, где мы обсуждали домашку и всё остальное, вторая тема — это теоретическая часть. Если есть возможность, желание поделить условно на UI, UX и технический дизайн, можешь поделиться, попробовать.
У меня тоже есть вопрос.
В прошлой неделе упоминалось, что мы будем работать с фигмой немножко.
Какого рода будут эти задания?
Это будет прототипирование.
Мы попробуем сделать легкий прототипчик. Но я думаю, что мы попробуем сделать в фигме, но в фигме прямо рисовать надо.
Хотя это тоже довольно просто.
Мы попробуем сделать это... Ну, есть специальные тулы для мокапов. То есть мы попробуем это сделать там.
Опять же, наша задача не научиться это делать, а попробовать. Поэтому в половине случаев, скорее всего, это будет только вот вам инструмент, вот мы хотим получить, примерно, такую схему для того, чтобы вы попробовали это делать сами, и только после этого мы уже будем доказывать, как это можно делать. Ну и, скорее всего, это не я тут уже делался.
Я тут только по технической части. Чего ты удивляешься?
Я вообще как бы в основном по технической части здесь.
Я филлер просто для остальных.
Ещё какие-нибудь вопросы?
Домашку мы сегодня получим примерно к какому часу?
Хороший вопрос.
Материал сейчас опубликуем этим,
если есть желание посмотреть, там дополнительные ссылки с большим количеством информации.